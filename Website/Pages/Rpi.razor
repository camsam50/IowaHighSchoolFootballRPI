@page "/rpi"

@using Website.Data
@inject BcMooreService RpiService

<style type="text/css">
    .table > thead > tr > th:hover {
        cursor: pointer;
        color: #286090;
        background-color: #f7f7f7;
    }
</style>

<h1>Teams and RPI</h1>

<p>This component fetches data from the BC Moore service.</p>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="@(() => SortTable("LongName"))">Name <span>@(SetSortIcon("LongName"))</span></th>
                <th @onclick="@(() => SortTable("Class"))">Class <span>@(SetSortIcon("Class"))</span></th>
                <th @onclick="@(() => SortTable("District"))">District <span>@(SetSortIcon("District"))</span></th>
                <th @onclick="@(() => SortTable("Conference"))">Conference <span>@(SetSortIcon("Conference"))</span></th>
                <th @onclick="@(() => SortTable("Wins"))"># Wins <span>@(SetSortIcon("Wins"))</span></th>
                <th @onclick="@(() => SortTable("Losses"))"># Losses <span>@(SetSortIcon("Losses"))</span></th>
                <th @onclick="@(() => SortTable("WinningPercentage"))">Win % <span>@(SetSortIcon("WinningPercentage"))</span></th>
                <th @onclick="@(() => SortTable("Rpi"))">RPI <span>@(SetSortIcon("Rpi"))</span></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {
            <tr>
                <td>@team.LongName</td>
                <td>@team.Class</td>
                <td>@team.District</td>
                <td>@team.Conference</td>
                <td>@team.Wins</td>
                <td>@team.Losses</td>
                <td>@team.WinningPercentage.ToString("P2")</td>
                <td>@team.GetRatingsPercentageIndex().ToString()</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isSortedAscending = true;
    private string activeSortColumn = "LongName";
    private IEnumerable<Team> teams;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        teams = await RpiService.LoadTeams(2020);
        isLoading = false;
    }

    protected void SortTable(string columnName)
    {
        isLoading = true;
        isSortedAscending = columnName == activeSortColumn && isSortedAscending ? false : true;
        activeSortColumn = columnName;
        if(isSortedAscending)
        {
            teams = columnName switch
            {
                "Class" => teams.OrderBy(f => f.Class).ThenByDescending(f => f.GetRatingsPercentageIndex()),
                "District" => teams.OrderBy(f => f.District),
                "Conference" => teams.OrderBy(f => f.Conference),
                "Wins" => teams.OrderBy(f => f.Wins),
                "Losses" => teams.OrderBy(f => f.Losses),
                "WinningPercentage" => teams.OrderBy(f => f.WinningPercentage),
                "Rpi" => teams.OrderBy(f => f.GetRatingsPercentageIndex())
                //, => teams.OrderBy(f => f.LongName)
            };
        }
        else
        {
            teams = columnName switch
            {
                "Class" => teams.OrderByDescending(f => f.Class),
                "District" => teams.OrderByDescending(f => f.District),
                "Conference" => teams.OrderByDescending(f => f.Conference),
                "Wins" => teams.OrderByDescending(f => f.Wins),
                "Losses" => teams.OrderByDescending(f => f.Losses),
                "WinningPercentage" => teams.OrderByDescending(f => f.WinningPercentage),
                "Rpi" => teams.OrderByDescending(f => f.GetRatingsPercentageIndex())
                //, => teams.OrderByDescending(f => f.LongName)
            };
        }
        isLoading = false;
    }

    protected string SetSortIcon(string columnName)
    {
        return activeSortColumn != columnName ? string.Empty :
            isSortedAscending ? "↓" :
            "↑";
    }
}
